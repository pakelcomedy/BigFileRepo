import requests
import time
import sys
import base64
import json
import os

# Constants (Replace these with your actual values)
GITHUB_TOKEN = 'your_personal_access_token'
REPO_NAME = 'your_username/your_repo_name'
BRANCH_NAME = 'main'  # Replace with the branch name you want to use

def upload_file_to_github(filename, content):
    url = f'https://api.github.com/repos/{REPO_NAME}/contents/{filename}'
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    data = {
        'message': 'Upload test file',
        'content': base64.b64encode(content).decode('utf-8'),
        'branch': BRANCH_NAME
    }
    response = requests.put(url, headers=headers, data=json.dumps(data))
    return response

def delete_file_from_github(filename, sha):
    url = f'https://api.github.com/repos/{REPO_NAME}/contents/{filename}'
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    data = {
        'message': 'Delete test file',
        'sha': sha,
        'branch': BRANCH_NAME
    }
    response = requests.delete(url, headers=headers, data=json.dumps(data))
    return response

def upload_speed_test(duration):
    try:
        print(f"Testing upload speed to GitHub repository {REPO_NAME}...\n")
        
        file_size_mb = 1  # Size of each file to upload in MB
        file_content = b'a' * file_size_mb * 1024 * 1024

        start_time = time.time()
        end_time = start_time
        total_uploaded = 0
        upload_count = 0

        while end_time - start_time < duration:
            filename = f'testfile_{upload_count}.txt'
            response = upload_file_to_github(filename, file_content)
            end_time = time.time()
            elapsed_time = end_time - start_time
            
            if response.status_code == 201:
                total_uploaded += file_size_mb * 1024 * 1024  # Update the total uploaded data size
                current_speed = (total_uploaded / elapsed_time) / (1024 * 1024)  # Calculate speed in MB/s
                sys.stdout.write(f"\rUploaded: {total_uploaded / (1024 * 1024):.2f} MB, "
                                 f"Speed: {current_speed:.2f} MB/s")
                sys.stdout.flush()
                upload_count += 1

                # Delete the file after uploading
                sha = response.json()['content']['sha']
                delete_response = delete_file_from_github(filename, sha)
                if delete_response.status_code == 200:
                    print(f"\nDeleted {filename} successfully")
                else:
                    print(f"\nFailed to delete {filename}. Status code: {delete_response.status_code}")
                    print(f"Response: {delete_response.json()}")
                    break
            else:
                print(f"\nFailed to upload file. Status code: {response.status_code}")
                print(f"Response: {response.json()}")
                break

            if elapsed_time >= duration:
                break

        upload_time = end_time - start_time
        upload_speed = (total_uploaded / upload_time) / (1024 * 1024)  # Calculate average speed in MB/s

        print(f"\n\nUpload time: {upload_time:.2f} seconds")
        print(f"Total data uploaded: {total_uploaded / (1024 * 1024):.2f} MB")
        print(f"Average upload speed: {upload_speed:.2f} MB/s")

    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {str(e)}")

def main():
    duration = 15  # Test duration in seconds
    upload_speed_test(duration)

if __name__ == "__main__":
    main()
